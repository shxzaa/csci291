#include <stdio.h>// used for printf and scanf 
#include <stdlib.h>//for rand and exit
#include <string.h>//for string
#include <time.h>//for formatting time and date funtions

// Constants for coffee types
#define ESPRESSO_BEANS 8
#define ESPRESSO_WATER 30
#define ESPRESSO_MILK 0
#define ESPRESSO_SYRUP 0
#define ESPRESSO_PRICE 3.5

#define CAPPUCCINO_BEANS 8
#define CAPPUCCINO_WATER 30
#define CAPPUCCINO_MILK 70
#define CAPPUCCINO_SYRUP 0
#define CAPPUCCINO_PRICE 4.5

#define MOCHA_BEANS 8
#define MOCHA_WATER 39
#define MOCHA_MILK 160
#define MOCHA_SYRUP 30
#define MOCHA_PRICE 5.5

// Admin constants
#define ADMIN_PASSWORD "admin123"
#define THRESHOLD_BEANS 5
#define THRESHOLD_WATER 10
#define THRESHOLD_MILK 5
#define THRESHOLD_SYRUP 30

// Global variables for quantities and total sales
float total_amount = 0;
int beans_quantity = 50;
int water_quantity = 50;
int milk_quantity = 50;
int syrup_quantity = 50;

// Function declarations
void order_coffee();
void admin_mode();
void display_quantities();
void replenish_ingredients();
void change_coffee_price();
void check_thresholds();

//main function
int main()
 {
    int choice;

    while (1) 
    {
        printf("\nCoffee Maker Menu:\n");
        printf("1. Order a coffee type\n");
        printf("2. Admin mode\n");
        printf("3. Exit the application\n");
        printf("Enter your choice: ");
        
        // Input validation for menu choice
        if (scanf("%d", &choice) != 1) 
        {
            printf("Invalid input! Please enter a number.\n");
            while(getchar() != '\n'); // Clear invalid input
            continue;
        }

        switch (choice) 
        {
            case 1:
                order_coffee();
                break;
            case 2:
                admin_mode();
                break;
            case 3:
                printf("Exiting the coffee maker application.\n");
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
}

void order_coffee() 
{
    int coffee_choice;
    float total_price;
    int beans_used, water_used, milk_used, syrup_used;

    while (1) 
    {
        printf("\nAvailable Coffee Types:\n");
        
        // Display available coffees
        if (beans_quantity >= ESPRESSO_BEANS && water_quantity >= ESPRESSO_WATER)
        {
            printf("1. Espresso (AED %.2f) - Available\n", ESPRESSO_PRICE);
        } 
        else 
        {
            printf("1. Espresso (AED %.2f) - Unavailable\n", ESPRESSO_PRICE);
        }
        
        if (beans_quantity >= CAPPUCCINO_BEANS && water_quantity >= CAPPUCCINO_WATER && milk_quantity >= CAPPUCCINO_MILK)
        {
            printf("2. Cappuccino (AED %.2f) - Available\n", CAPPUCCINO_PRICE);
        } 
        else 
        {
            printf("2. Cappuccino (AED %.2f) - Unavailable\n", CAPPUCCINO_PRICE);
        }
        
        if (beans_quantity >= MOCHA_BEANS && water_quantity >= MOCHA_WATER && syrup_quantity >= MOCHA_SYRUP) 
        {
            printf("3. Mocha (AED %.2f) - Available\n", MOCHA_PRICE);
        } 
        else 
        {
            printf("3. Mocha (AED %.2f) - Unavailable\n", MOCHA_PRICE);
        }

        printf("0. Exit ordering\n");

        printf("Select your coffee type: ");
      
        if (scanf("%d", &coffee_choice) != 1)   // Input validation for coffee choice
        {
            printf("Invalid input! Please enter a number.\n");
            while(getchar() != '\n'); // Clear invalid input
            continue;
        }

        if (coffee_choice == 0) 
        {
            return;// This allows the user to cancel their coffee order and return to the main menu
        }

        // Determine coffee choice and check for available ingredients
        if (coffee_choice == 1 && beans_quantity >= ESPRESSO_BEANS && water_quantity >= ESPRESSO_WATER) 
        {
            total_price = ESPRESSO_PRICE;
            beans_used = ESPRESSO_BEANS;
            water_used = ESPRESSO_WATER;
            milk_used = ESPRESSO_MILK;
            syrup_used = ESPRESSO_SYRUP;
        } 
        else if (coffee_choice == 2 && beans_quantity >= CAPPUCCINO_BEANS && water_quantity >= CAPPUCCINO_WATER && milk_quantity >= CAPPUCCINO_MILK) 
        {
            total_price = CAPPUCCINO_PRICE;
            beans_used = CAPPUCCINO_BEANS;
            water_used = CAPPUCCINO_WATER;
            milk_used = CAPPUCCINO_MILK;
            syrup_used = CAPPUCCINO_SYRUP;
        } 
        else if (coffee_choice == 3 && beans_quantity >= MOCHA_BEANS && water_quantity >= MOCHA_WATER && syrup_quantity >= MOCHA_SYRUP) 
        {
            total_price = MOCHA_PRICE;
            beans_used = MOCHA_BEANS;
            water_used = MOCHA_WATER;
            milk_used = MOCHA_MILK;
            syrup_used = MOCHA_SYRUP;
        } 
        else 
        {
            printf("Invalid choice or insufficient ingredients.\n");
            continue;
        }

        printf("You selected: Coffee %d (AED %.2f). Confirm? (1 for Yes, 0 for No): ", coffee_choice, total_price);
        int confirm;//to store the user's confirmation input
        scanf("%d", &confirm);
        if (confirm != 1) 
        {
            continue; // This allows the user to re-select their coffee choice or exit ordering
        }

    // Payment process
     float amount_paid = 0;
    while (amount_paid < total_price) 
    {
     printf("Insert coin (1 or 0.5 AED): ");
     float payment_choice;//to store users payment choice
     if (scanf("%f", &payment_choice) != 1)
     {
         printf("Invalid input! Please enter a valid coin.\n");
         while(getchar() != '\n'); // Clear the input buffer to remove invalid input
         continue;// Continue to the next iteration of the while loop
     }
     if (payment_choice == 1.0 || payment_choice == 0.5) 
     {
         amount_paid += payment_choice;
     } 
     else 
     {
         printf("Invalid coin! Please collect your invalid coin.\n");//the coin is invalid so inform the user to collect it
     }
    }
     // Update quantities by decreasing the quantity and printing receipt
     beans_quantity -= beans_used;
     water_quantity -= water_used;
     milk_quantity -= milk_used;
     syrup_quantity -= syrup_used;
     total_amount += total_price;

     printf("You bought a cup of coffee for AED %.2f. Amount paid: AED %.2f. Change: AED %.2f\n",
        total_price, amount_paid, amount_paid - total_price);// Print a receipt for the user, showing the details of their purchase

    // Check thresholds to see if any ingredients are low
     check_thresholds();
    }
  }
  void admin_mode()//funtion to handle admin mode access
 {
    char password[20];// the password holds only upto 20 characters 
    
    printf("Enter admin password: ");
    scanf("%s", password);//reading the password from the user
    
    if (strcmp(password, ADMIN_PASSWORD) != 0)//comparing the passwords
    {
        printf("Incorrect password. Exiting admin mode.\n");
        return;
    }

    int admin_choice;//displaying the admin menu
    while (1) 
    {
        printf("\nAdmin Menu:\n");
        printf("1. Display ingredient quantities and total sales\n");
        printf("2. Replenish ingredients\n");
        printf("3. Change coffee prices\n");
        printf("0. Exit admin mode\n");
        printf("Enter your choice: ");
        
        if (scanf("%d", &admin_choice) != 1) // If scanf fails to read an integer, it will not modify admin_choice
        {
            printf("Invalid input! Please enter a number.\n");
            while(getchar() != '\n'); // Clear invalid input
            continue;
        }
        switch (admin_choice) 
        {
            case 1:
                display_quantities();//if admin choice is 1 call the function to display ingredient quantities
                break;
            case 2:
                replenish_ingredients();//if admin choice is 2 call the function to display replenish ingredients
                break;
            case 3:
                change_coffee_price();//if admin choice is  3 call the function to display the change in coffee price
                break;
            case 0:
                return;
            default:
                printf("Invalid choice. Please try again.\n");//error message for wrong choice
        }
    }
}
      void display_quantities() 
{
    printf("\nCurrent Ingredient Quantities:\n");
    printf("Coffee Beans: %-12d\n", beans_quantity);
    printf("Water: %-12d\n", water_quantity);
    printf("Milk: %-12d\n", milk_quantity);
    printf("Chocolate Syrup: %-12d\n", syrup_quantity);
    printf("Total Sales Amount: AED %-12.2f\n", total_amount);
}

void replenish_ingredients() 
{
    // Randomly reset quantities for demonstration
    srand(time(0));
    beans_quantity = rand() % 50 + 20; // Reset between 20 and 70
    water_quantity = rand() % 50 + 20;
    milk_quantity = rand() % 50 + 20;
    syrup_quantity = rand() % 50 + 20;
    printf("Ingredients replenished successfully.\n");
}

void change_coffee_price() 
{
    float new_price;

    // Update price for Espresso
    printf("Enter new price for Espresso (current: AED %.2f): ", ESPRESSO_PRICE);
    scanf("%f", &new_price);
    // In a real implementation, you would store the new price
    printf("New price for Espresso set to AED %.2f\n", new_price);

    // Repeat for other coffee types
    printf("Enter new price for Cappuccino (current: AED %.2f): ", CAPPUCCINO_PRICE);
    scanf("%f", &new_price);
    printf("New price for Cappuccino set to AED %.2f\n", new_price);

    printf("Enter new price for Mocha (current: AED %.2f): ", MOCHA_PRICE);
    scanf("%f", &new_price);
    printf("New price for Mocha set to AED %.2f\n", new_price);
}

void check_thresholds() 
{
    if (beans_quantity <= THRESHOLD_BEANS) {
        printf("Alert: Coffee beans quantity is low!\n");
    }
    if (water_quantity <= THRESHOLD_WATER) {
        printf("Alert: Water quantity is low!\n");
    }
    if (milk_quantity <= THRESHOLD_MILK) {
        printf("Alert: Milk quantity is low!\n");
    }
    if (syrup_quantity <= THRESHOLD_SYRUP) {
        printf("Alert: Chocolate syrup quantity is low!\n");
    }
}  

    
