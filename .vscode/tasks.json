#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

// Constants for coffee types and their prices
#define ESPRESSO_BEANS 8
#define ESPRESSO_WATER 30
#define ESPRESSO_COST 3.5

#define CAPPUCCINO_BEANS 8
#define CAPPUCCINO_WATER 30
#define CAPPUCCINO_MILK 70
#define CAPPUCCINO_COST 4.5

#define MOCHA_BEANS 8
#define MOCHA_WATER 39
#define MOCHA_MILK 160
#define MOCHA_SYRUP 30
#define MOCHA_COST 5.5

// Admin passcode and sales tracking
#define ADMIN_PASSCODE "VAV"
float total_sales = 0;

// Ingredient levels (available amounts)
float coffee_level = 300; // in grams
float water_level = 300;  // in milliliters
float milk_level = 300;   // in milliliters
float syrup_level = 300;  // in milliliters

// Function Prototypes
void order_coffee();         // Function to handle coffee ordering
void process_payment(float amount_due); // Function to process payment
void admin_menu();           // Function for admin tasks
void display_stock_and_sales(); // Function to display stock and sales
void restock_ingredients();   // Function to restock ingredients
void change_coffee_prices();   // Function to change coffee prices

// Main Function
int main() {
    int user_choice;

    // Main loop to show menu
    while (1) {
        printf("\n\n*MENU*\n");
        printf("1. Order Coffee\n");
        printf("2. Enter Admin Menu\n");
        printf("3. Exit\n");
        printf("Please select an option: ");
        scanf("%d", &user_choice); // User input for menu selection

        switch (user_choice) {
            case 1:
                order_coffee(); // Call function to order coffee
                break;
            case 2:
                admin_menu();   // Call function for admin tasks
                break;
            case 3:
                printf("Exiting program...\n"); // Exit message
                return 0; // End program
            default:
                printf("Invalid option.\n"); // Handle invalid input
        }
    }
    return 0;
}

// Admin Menu Function
void admin_menu() {
    char input_pass[50]; // Variable to store input passcode
    int admin_option;    // Variable for admin option selection

    // Prompt for admin password
    printf("Enter admin password: ");
    scanf("%s", input_pass);

    // Check if entered password matches the defined passcode
    if (strcmp(input_pass, ADMIN_PASSCODE) == 0) {
        printf("Access granted.\n");

        // Loop for admin menu options
        while (1) {
            printf("ADMIN MENU:\n");
            printf("1. Display Stock and Sales\n");
            printf("2. Restock Ingredients\n");
            printf("3. Change Coffee Prices\n");
            printf("4. Exit\n");
            printf("Select an option: ");
            scanf("%d", &admin_option);

            switch (admin_option) {
                case 1:
                    display_stock_and_sales(); // Show stock and sales
                    break;
                case 2:
                    restock_ingredients(); // Call function to restock ingredients
                    break;
                case 3:
                    change_coffee_prices(); // Call function to change prices
                    break;
                case 4:
                    printf("Exiting admin menu...\n"); // Exit message
                    return; // Exit admin menu
                default:
                    printf("Invalid selection.\n"); // Handle invalid input
            }
        }
    } else {
        printf("Incorrect password.\n"); // Handle incorrect password
    }
}

// Display Stock and Sales Function
void display_stock_and_sales() {
    // Print current stock levels and total sales
    printf("Current stock levels and sales:\n");
    printf("Coffee beans: %.2f g\n", coffee_level);
    printf("Water: %.2f ml\n", water_level);
    printf("Milk: %.2f ml\n", milk_level);
    printf("Chocolate syrup: %.2f ml\n", syrup_level);
    printf("Total sales: %.2f dhs\n", total_sales);
}

// Order Coffee Function
void order_coffee() {
    int coffee_choice; // Variable for coffee selection

    // Display coffee menu
    printf("\n\n*COFFEE MENU*\n");
    printf("1. Espresso\t\t%.2f\n", ESPRESSO_COST);
    printf("2. Cappuccino\t\t%.2f\n", CAPPUCCINO_COST);
    printf("3. Mocha\t\t%.2f\n", MOCHA_COST);
    printf("0. Cancel Order\n");
    printf("Choose your coffee: ");
    scanf("%d", &coffee_choice); // User input for coffee choice

    switch (coffee_choice) {
        case 1: // Espresso selection
            printf("You've chosen Espresso.\n");
            if (ESPRESSO_BEANS <= coffee_level && ESPRESSO_WATER <= water_level) {
                printf("Brewing your Espresso...\n");
                process_payment(ESPRESSO_COST); // Process payment for espresso
                coffee_level -= ESPRESSO_BEANS; // Deduct beans
                water_level -= ESPRESSO_WATER; // Deduct water
            } else {
                printf("Insufficient ingredients for Espresso.\n"); // Not enough ingredients
            }
            break;
        case 2: // Cappuccino selection
            printf("You've chosen Cappuccino.\n");
            if (CAPPUCCINO_BEANS <= coffee_level && CAPPUCCINO_WATER <= water_level && CAPPUCCINO_MILK <= milk_level) {
                printf("Brewing your Cappuccino...\n");
                process_payment(CAPPUCCINO_COST); // Process payment for cappuccino
                coffee_level -= CAPPUCCINO_BEANS; // Deduct beans
                water_level -= CAPPUCCINO_WATER; // Deduct water
                milk_level -= CAPPUCCINO_MILK; // Deduct milk
            } else {
                printf("Insufficient ingredients for Cappuccino.\n"); // Not enough ingredients
            }
            break;
        case 3: // Mocha selection
            printf("You've chosen Mocha.\n");
            if (MOCHA_BEANS <= coffee_level && MOCHA_WATER <= water_level && MOCHA_MILK <= milk_level && MOCHA_SYRUP <= syrup_level) {
                printf("Brewing your Mocha...\n");
                process_payment(MOCHA_COST); // Process payment for mocha
                coffee_level -= MOCHA_BEANS; // Deduct beans
                water_level -= MOCHA_WATER; // Deduct water
                milk_level -= MOCHA_MILK; // Deduct milk
                syrup_level -= MOCHA_SYRUP; // Deduct syrup
            } else {
                printf("Insufficient ingredients for Mocha.\n"); // Not enough ingredients
            }
            break;
        case 0: // Cancel order
            printf("Order canceled.\n");
            break;
        default:
            printf("Invalid selection.\n"); // Handle invalid input
    }
}

// Payment Processing Function
void process_payment(float amount_due) {
    float total_inserted = 0; // Total amount inserted by the user
    float coin; // Variable to hold the coin value

    // Loop until the total inserted meets or exceeds the amount due
    while (total_inserted < amount_due) {
        printf("Insert 1 dh or 0.5 dh: ");
        scanf("%f", &coin); // User input for coin

        if (coin == 1) {
            total_inserted += 1; // Add 1 dh
        } else if (coin == 0.5) {
            total_inserted += 0.5; // Add 0.5 dh
        } else {
            printf("Invalid coin.\n"); // Handle invalid coin
        }
    }

    // Calculate and return change if necessary
    if (total_inserted > amount_due) {
        float change = total_inserted - amount_due;
        printf("Your change is %.1f dhs.\n", change);
    }

    total_sales += amount_due; // Update total sales
    printf("Thank you! Enjoy your coffee!\n"); // Thank you message
}

// Restocking Ingredients Function
void restock_ingredients() {
    int choice; // Variable for ingredient selection
    int quantity; // Variable for quantity to restock
    srand(time(NULL)); // Seed for random number generation

    // Display restock options
    printf("Restock Ingredients:\n");
    printf("1. Coffee Beans\n");
    printf("2. Water\n");
    printf("3. Milk\n");
    printf("4. Chocolate Syrup\n");
    printf("0. Exit\n");
    printf("Select item to restock: ");
    scanf("%d", &choice);

    // Generate a random quantity between 100 and 500
    quantity = 100 + rand() % 400;

    switch (choice) {
        case 1:
            printf("Restocking %d grams of coffee beans.\n", quantity);
            coffee_level += quantity; // Increase coffee level
            printf("New coffee beans level: %.2f g\n", coffee_level);
            break;
        case 2:
            printf("Restocking %d ml of water.\n", quantity);
            water_level += quantity; // Increase water level
            printf("New water level: %.2f ml\n", water_level);
            break;
        case 3:
            printf("Restocking %d ml of milk.\n", quantity);
            milk_level += quantity; // Increase milk level
            printf("New milk level: %.2f ml\n", milk_level);
            break;
        case 4:
            printf("Restocking %d ml of syrup.\n", quantity);
            syrup_level += quantity; // Increase syrup level
            printf("New syrup level: %.2f ml\n", syrup_level);
            break;
        case 0:
            printf("Exiting restock mode.\n"); // Exit message
            break;
        default:
            printf("Invalid selection.\n"); // Handle invalid input
    }
}

// Change Coffee Prices Function
void change_coffee_prices() {
    int coffee_type; // Variable for coffee type selection
    float new_price; // Variable for new price input

    // Display options for changing coffee prices
    printf("Change Coffee Prices:\n");
    printf("1. Espresso\n");
    printf("2. Cappuccino\n");
    printf("3. Mocha\n");
    printf("Select coffee type: ");
    scanf("%d", &coffee_type);

    switch (coffee_type) {
        case 1: // Espresso
            printf("Current price of Espresso: %.2f\n", ESPRESSO_COST);
            printf("Enter new price: ");
            scanf("%f", &new_price); // User input for new price
            ESPRESSO_COST = new_price; // Update espresso price
            printf("New Espresso price: %.2f\n", ESPRESSO_COST);
            break;
        case 2: // Cappuccino
            printf("Current price of Cappuccino: %.2f\n", CAPPUCCINO_COST);
            printf("Enter new price: ");
            scanf("%f", &new_price); // User input for new price
            CAPPUCCINO_COST = new_price; // Update cappuccino price
            printf("New Cappuccino price: %.2f\n", CAPPUCCINO_COST);
            break;
        case 3: // Mocha
            printf("Current price of Mocha: %.2f\n", MOCHA_COST);
            printf("Enter new price: ");
            scanf("%f", &new_price); // User input for new price
            MOCHA_COST = new_price; // Update mocha price
            printf("New Mocha price: %.2f\n", MOCHA_COST);
            break;
        default:
            printf("Invalid selection.\n"); // Handle invalid input
    }
}
